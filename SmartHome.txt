#Inicia el Registro de usuarios e inicio de sesion
'''
Inicio de sesion
'''
## Definir los componentes del los diccionarios (inicialmente vacíos)
usuarios = []
usuariosRegistrados = {}
habitacionesUsuarios = {}
def menu_principal():
    '''
    Funcion para el menu principal
    '''
    while True: 
        print("\n ****** Bienvenido a SmartHome ******\n")
        print("¿Qué deseas hacer?")
        print("1. Ingresar con tu usuario")
        print("2. Agregar usuario")
        print("3. Salir")
        opcion = input("Por favor seleccione una opción: ")
        
        if opcion == "1":
            usuarioActual = usuarioExistente()
            if usuarioActual:
                while True:
                    print("\n¿Qué deseas hacer,", usuarioActual + "?")
                    print("1. Agregar una habitación")
                    print("2. Mostrar todas las habitaciones")
                    print("3. Agregar dispositivo a una habitación")
                    print("4. Cerrar sesión")
                    otraOpcion = input("Por favor seleccione una opción: ")
                    if otraOpcion == "1":
                        agregarHabitacion(usuarioActual)
                    elif otraOpcion == "2":
                        mostrarHabitaciones(usuarioActual)
                    elif opcion == "3":
                        agregarDispositivo(usuarioActual)
                    elif otraOpcion == "4":
                        print("Sesión finalizada. ¡Hasta luego!")
                        break
                    else:
                        print("Su selección no es compatible. Intente de nuevo")
        elif opcion == "2":
            nuevoUsuario()
        elif opcion == "3":
            print("\nSesión finalizada. ¡Hasta luego!")
            break
        else:
            print("Su selección no es compatible. Intente de nuevo")
# Primera opción del software:
## Extraer la información de un usuario existente
def usuarioExistente():
    global usuariosRegistrados
    usuarioNombre = input("\nIntroduzca su nombre de usuario: ")
    if usuarioNombre in usuariosRegistrados.keys():       
        # Verificación del usuario
        pin = input("Introduzca su pin: ")
        if usuariosRegistrados[usuarioNombre]['pin'] == int(pin):
            print("\n ¡Hola " + usuarioNombre + "!\n")
            print("Tu correo electrónico registrado es: ")
            print(usuariosRegistrados[usuarioNombre]['correo'])
            return usuarioNombre  # Devuelve el nombre del usuario actual
        else:
            print("El pin proporcionado no corresponde con el usuario")
    # Si el usuario no existe en el diccionario:
    else:
        print("\n MENSAJE: El usuario no existe. Intente de nuevo o agregue nuevo usuario\n")
    return None
# Segunda opción del software;
## Crear un nuevo usuario
def nuevoUsuario():
    global usuariosRegistrados
    nuevoUsuario = input("\nIngrese el nombre de usuario: ")
    correo = input("Ingrese el correo electrónico: ")
    pin = input("Ingrese el pin: ")
    usuariosRegistrados[nuevoUsuario] = {'correo': correo, 'pin': int(pin)}
    habitacionesUsuarios[nuevoUsuario] = {}  # Inicializa las habitaciones del nuevo usuario como una lista vacía
    print("Registro exitoso. Ahora puede iniciar sesión.")
    
# Opción para agregar una habitación
def agregarHabitacion(usuarioActual):
    global habitacionesUsuarios
    nombreHabitacion = input("\nIngrese el nombre de la habitación que desea agregar: ")
    if nombreHabitacion not in habitacionesUsuarios[usuarioActual]:
        habitacionesUsuarios[usuarioActual] = {'Habitacion' : nombreHabitacion}
        print("Habitación agregada correctamente.")
    else:
        print("La habitación ya existe.")
# Opción para mostrar todas las habitaciones del usuario
def mostrarHabitaciones(usuarioActual):
    global habitacionesUsuarios
    print("\nHabitaciones de", usuarioActual)
    if habitacionesUsuarios[usuarioActual]:
        for habitacion in habitacionesUsuarios[usuarioActual]:
            print("-", habitacionesUsuarios[usuarioActual][habitacion])
    else:
        print("No se han agregado habitaciones.")

# ... (código anterior)

# Opción para agregar un dispositivo a una habitación
def agregarDispositivo(usuarioActual):
    global habitacionesUsuarios

    nombreHabitacion = input("\nIngrese el nombre de la habitación que desea agregar Dispositivo: ")

    if habitacionesUsuarios[usuarioActual].get('Habitacion') != nombreHabitacion:
        print("Habitación No Existe.")  
    else:
        nombreDispositivo = input("\nIngrese el nombre del Dispositivo: ")

        pa = input("\nDesea configurar horario a este Dispositivo: (S/N) ")

        if (pa == 'S'):
           hi = input("\nHora inicial encendido: ")
           hf = input("\nHora Final encendido: ")
           
           habitacionesUsuarios[usuarioActual] = {'Habitacion' : nombreHabitacion, 'Dispositivo'  : nombreDispositivo, 'Hora Inicial' : hi, 'Hora Final' : hf}
           print("Dispositivo agregado correctamente, con programación de horario.")
        else:
           habitacionesUsuarios[usuarioActual] = {'Habitacion' : nombreHabitacion, 'Dispositivo'  : nombreDispositivo}
           print(f"Dispositivo {nombreDispositivo} sin Programación en la habitación {nombreHabitacion}.")



# Opción para ver los dispositivos de una habitación
def verDispositivo(usuarioActual):
    global habitacionesUsuarios

    nombreHabitacion = input("\nIngrese el nombre de la habitación para ver los dispositivos: ")

    if habitacionesUsuarios[usuarioActual].get('Habitacion') != nombreHabitacion:
        print("Habitación No Existe.")  
    else:
        print (f'------   Dispositivos de la Habitación {nombreHabitacion}    ------')
        if habitacionesUsuarios[usuarioActual].get('Hora Inicial') == None:
            print(f'\n',habitacionesUsuarios[usuarioActual].get('Dispositivo'), ' Sin programación de encendido y apagado')
        else:
            print(f'\n',habitacionesUsuarios[usuarioActual].get('Dispositivo'), ' Enciende a la ', habitacionesUsuarios[usuarioActual].get('Hora Inicial'), ' y se apaga a la ', habitacionesUsuarios[usuarioActual].get('Hora Final'))


        print(f"\nLista de Dispositivos en la habitación {nombreHabitacion}.")
  
# Menú de opciones para el usuario
def menu_usuario(usuarioActual):
    while True:
        print("\n--- Menú de Usuario ---")
        print("1. Agregar una habitación")
        print("2. Mostrar todas las habitaciones")
        print("3. Agregar dispositivo a una habitación")
        print("4. Dispositivo de una habitación")
        print("5. Cerrar sesión")
        opcion = input("Por favor seleccione una opción: ")

        if opcion == "1":
            agregarHabitacion(usuarioActual)
        elif opcion == "2":
            mostrarHabitaciones(usuarioActual)
        elif opcion == "3":
            agregarDispositivo(usuarioActual)
        elif opcion == "4":
            verDispositivo(usuarioActual)
        elif opcion == "5":
            print("Sesión finalizada. ¡Hasta luego!")
            break
        else:
            print("Su selección no es compatible. Inténtelo de nuevo.")

# Ejecutar el programa
while True:
    print("\nBienvenido a SmartHome.\n")
    print("¿Qué deseas hacer?")
    print("1. Ingresar con tu usuario")
    print("2. Agregar usuario")
    print("3. Salir")
    opcion = input("Por favor seleccione una opción: ")

    if opcion == "1":
        usuarioActual = usuarioExistente()
        if usuarioActual:
            menu_usuario(usuarioActual)
    elif opcion == "2":
        nuevoUsuario()
    elif opcion == "3":
        print("\nSesión finalizada. ¡Hasta luego!")
        break
    else:
        print("Su selección no es compatible. Inténtelo de nuevo.")

        
def registrar_usuario():
    '''
    función para registrar usuarios
    '''
    nombre = input("Ingrese su nombre: ")
    correo = input("Ingrese su correo electrónico: ")
    pin = input("Ingrese su PIN: ")
    usuario = {'nombre': nombre, 'correo': correo, 'pin': pin}
    usuarios.append(usuario)
    print("Usuario registrado exitosamente.")
    '''
    Al registrar exitosamente a un usuario se regresa al menú principal 
    '''
    menu_principal()

def iniciar_sesion():
    '''
    Funcion para ingresar a la aplicacion
    '''
    nombre_usuario = input("Ingrese su nombre de usuario: ")
    pin = input("Ingrese su PIN: ")
    for usuario in usuarios:
        if usuario['nombre'] == nombre_usuario and usuario['pin'] == pin:
            print("Inicio de sesión exitoso.")
            return
    print("Nombre de usuario o PIN incorrecto. Inténtelo de nuevo.")
    iniciar_sesion()

menu_principal()  

#Funciones Generales 
def crear_cerradura(nombre, estado="cerrado", pin="1234"):
    return {"nombre": nombre, "estado": estado, "pin": pin}

def cambiar_pin(cerradura, pin_actual, nuevo_pin):
    if len(nuevo_pin) > 4:
        print("¡Error! El pin no puede tener más de 4 dígitos.")
    elif pin_actual == cerradura["pin"]:
        cerradura["pin"] = nuevo_pin
        print("¡El pin ha sido cambiado con éxito!")
    else:
        print("¡Pin incorrecto! No se puede cambiar el pin.")

def abrir_cerradura(cerradura, pin):
    if pin == cerradura["pin"]:
        cerradura["estado"] = "abierto"
        print(f"La cerradura {cerradura['nombre']} ha sido abierta.")
    else:
        print("¡Pin incorrecto! No se puede abrir la cerradura.")

def cerrar_cerradura(cerradura):
    cerradura["estado"] = "cerrado"
    print(f"La cerradura {cerradura['nombre']} ha sido cerrada.")

def menu_cerraduras(cerraduras):
    while True:
        print("\n--- Menú de Cerraduras ---")
        for i, cerradura in enumerate(cerraduras, start=1):
            print(f"{i}. {cerradura['nombre']}: {cerradura['estado']}")

        print("0. Salir")

        opcion = input("Seleccione una cerradura para cambiar su estado: ")

        if opcion == '0':
            break
        elif opcion.isdigit() and 0 < int(opcion) <= len(cerraduras):
            cerradura_seleccionada = cerraduras[int(opcion) - 1]

            print(f"\nOperando la cerradura {cerradura_seleccionada['nombre']}:")
            print("1. Abrir cerradura")
            print("2. Cerrar cerradura")
            print("3. Cambiar pin")

            accion = input("Seleccione una acción: ")

            if accion == '1':
                pin = input("Ingrese el pin: ")
                abrir_cerradura(cerradura_seleccionada, pin)
            elif accion == '2':
                cerrar_cerradura(cerradura_seleccionada)
            elif accion == '3':
                pin_actual = input("Ingrese el pin actual: ")
                nuevo_pin = input("Ingrese el nuevo pin: ")
                cambiar_pin(cerradura_seleccionada, pin_actual, nuevo_pin)
            else:
                print("¡Opción inválida! Inténtelo de nuevo.")
        else:
            print("¡Opción inválida! Inténtelo de nuevo.")

# Creamos las cerraduras
cerraduras = [
    crear_cerradura("Salida Principal"),
    crear_cerradura("Salida Trasera"),
    crear_cerradura("Balcon")
]

# Ejecutamos el menú de cerraduras
menu_cerraduras(cerraduras)


